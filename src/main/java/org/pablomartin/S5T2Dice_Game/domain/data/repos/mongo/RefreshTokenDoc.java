package org.pablomartin.S5T2Dice_Game.domain.data.repos.mongo;

import jakarta.validation.constraints.NotNull;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;
import org.pablomartin.S5T2Dice_Game.domain.models.Player;
import org.pablomartin.S5T2Dice_Game.domain.models.PlayerSecurity;
import org.pablomartin.S5T2Dice_Game.domain.models.SecurityClaims;
import org.springframework.data.mongodb.core.mapping.DBRef;
import org.springframework.data.mongodb.core.mapping.Document;
import org.springframework.data.mongodb.core.mapping.DocumentReference;
import org.springframework.data.mongodb.core.mapping.MongoId;

import java.util.Objects;
import java.util.UUID;

@Document(collection = "RefreshTokens")
@Getter
@Setter // for if defined property acccess
@ToString
public class RefreshTokenDoc {

    @MongoId
    private UUID refreshTokenId; //before persisting the ID is provided (not autogenerated)

    @DBRef
    private PlayerDoc player;

    //one unique all args constructor, visible only at package level
    RefreshTokenDoc(@NotNull UUID refreshTokenId, @NotNull PlayerDoc player) {
        this.refreshTokenId = refreshTokenId;
        this.player = player;
    }

    //factory method
    public static RefreshTokenDoc of(@NotNull UUID refreshTokenId, @NotNull PlayerDoc playerDoc) {
        return new RefreshTokenDoc(refreshTokenId, playerDoc);
    }

    public SecurityClaims toCredentialsForJWT() {
        PlayerSecurity securityModel = PlayerSecurity.builder()
                .role(player.getSecurityDetails().getRole())
                .refreshTokenId(refreshTokenId)
                .build();

        return Player.builder()
                .playerId(player.getPlayerId())
                .username(player.getUsername())
                .security(securityModel)
                .build();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        RefreshTokenDoc that = (RefreshTokenDoc) o;
        return getRefreshTokenId().equals(that.getRefreshTokenId()) && getPlayer().equals(that.getPlayer());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getRefreshTokenId(), getPlayer());
    }
}
